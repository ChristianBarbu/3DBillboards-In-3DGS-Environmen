//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputActions/CameraController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraController"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""ceee8642-9ba8-47b4-b1a1-63ad603d0008"",
            ""actions"": [
                {
                    ""name"": ""MoveInXYAxis"",
                    ""type"": ""PassThrough"",
                    ""id"": ""428fa7b1-ffac-4114-93f6-f003368cdf99"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""59a42a33-f1e5-4305-b061-ec2ff683908e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveInZAxis"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3e838f59-6571-4864-841b-ccee88f9e3de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2b732a6-c639-4c67-b6f7-4fa66c2de091"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInXYAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c22cfaa-6c5a-403c-94e2-ad81561d61b7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65175db1-a384-4bd2-a61e-994b4b266770"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInZAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fd28247-6efd-4235-9ca6-bf871af276e2"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=-1)"",
                    ""groups"": """",
                    ""action"": ""MoveInZAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_MoveInXYAxis = m_Control.FindAction("MoveInXYAxis", throwIfNotFound: true);
        m_Control_Rotate = m_Control.FindAction("Rotate", throwIfNotFound: true);
        m_Control_MoveInZAxis = m_Control.FindAction("MoveInZAxis", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private List<IControlActions> m_ControlActionsCallbackInterfaces = new List<IControlActions>();
    private readonly InputAction m_Control_MoveInXYAxis;
    private readonly InputAction m_Control_Rotate;
    private readonly InputAction m_Control_MoveInZAxis;
    public struct ControlActions
    {
        private @CameraController m_Wrapper;
        public ControlActions(@CameraController wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveInXYAxis => m_Wrapper.m_Control_MoveInXYAxis;
        public InputAction @Rotate => m_Wrapper.m_Control_Rotate;
        public InputAction @MoveInZAxis => m_Wrapper.m_Control_MoveInZAxis;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void AddCallbacks(IControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlActionsCallbackInterfaces.Add(instance);
            @MoveInXYAxis.started += instance.OnMoveInXYAxis;
            @MoveInXYAxis.performed += instance.OnMoveInXYAxis;
            @MoveInXYAxis.canceled += instance.OnMoveInXYAxis;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @MoveInZAxis.started += instance.OnMoveInZAxis;
            @MoveInZAxis.performed += instance.OnMoveInZAxis;
            @MoveInZAxis.canceled += instance.OnMoveInZAxis;
        }

        private void UnregisterCallbacks(IControlActions instance)
        {
            @MoveInXYAxis.started -= instance.OnMoveInXYAxis;
            @MoveInXYAxis.performed -= instance.OnMoveInXYAxis;
            @MoveInXYAxis.canceled -= instance.OnMoveInXYAxis;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @MoveInZAxis.started -= instance.OnMoveInZAxis;
            @MoveInZAxis.performed -= instance.OnMoveInZAxis;
            @MoveInZAxis.canceled -= instance.OnMoveInZAxis;
        }

        public void RemoveCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlActions @Control => new ControlActions(this);
    public interface IControlActions
    {
        void OnMoveInXYAxis(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnMoveInZAxis(InputAction.CallbackContext context);
    }
}
